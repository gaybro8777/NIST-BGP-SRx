# Contains the name of the library that will be loaded. By default SRxCryptoAPI
# comes with two implementations:
# testlib        - For testing purpose only
# bgpsec_openssl - provides a crypto implementation based on OpenSSL (DEFAULT)
library_conf="bgpsec_openssl";

# Allows to specify the default key volt. Can be overwritten programatically.
key_volt = "/var/lib/bgpsec-keys/";

# Specify the key file extensions fir private keys DER encoded and public keys 
# embedded in X509
key_ext_private="der";
key_ext_public="cert";

# Specify the debugging type which indicates only information that matches 
# the debugging type or are less in its numerical value are displayed. 
# The following debugging types are available:
#     0: LOG_EMERG   - system is unusable
#     1: LOG_ALERT   - action must be taken immediately 
#     2: LOG_CRIT    - critical conditions
#     3: LOG_ERR     - error conditions
#     4: LOG_WARNING - warning conditions
#     5: LOG_NOTICE  - normal but significant condition
#     6: LOG_INFO    - informational (DEFAULT)
#     7: LOG_DEBUG   - debug-level messages
#debug-type = 6;

# this is the mapping information of the library to be loaded
bgpsec_openssl: {
  library_name = "libSRxBGPSecOpenSSL.so";

#
# The following method mappings allow to customize the mapping. In case the 
# mapping is disabled using the hash tag, misspelled, or missing at all the 
# default mapping of method names as specified in the header file will be used.
# In case the default specified method names are not implemented, the 
# SRxCryptoAPI wrapper functions are mapped.
#

# Library initialization method parameters - init is only performed if use_init
# is set to 1. To disable initialization (including mapping) set value to 0.
  use_init                    = "0";
# A String or "NULL" as initialization parameter.
  init_value                  = "NULL";
  method_init                 = "init";

# Minimum required functions to operate
  method_validate             = "validate";
  method_sign_with_key        = "sign_with_key";

# In case public key management is available
  method_isExtended           = "isExtended";
  method_extValidate          = "extValidate";
  method_registerPublicKey    = "registerPublicKey";
  method_unregisterPublicKey  = "unregisterPublicKey";

# In case private key management is available
  method_isPrivateKeyStorage  = "isPrivateKeyStorage";
  method_sign_with_id         = "sign_with_id";
  method_registerPrivateKey   = "registerPrivateKey";
  method_unregisterPrivateKey = "unregisterPrivateKey";
};

# Some other example configuration 
testlib: {
  library_name="libSRxCryptoTestlib.so";

# Library initialization method parameters - init is only performed if use_init
# is set to 1. To disable initialization (including mapping) set value to 0.
  use_init                    = "1";
# A String or NULL as initialization parameter.
  init_value                  = "some random text";
  method_init                 = "init";

# Minimum required functions to operate
  method_validate             = "validate";
  method_sign_with_key        = "sign_with_key";

# In case public key management is available
  method_isExtended           = "isExtended";
  method_extValidate          = "extValidate";
  method_registerPublicKey    = "registerPublicKey";
  method_unregisterPublicKey  = "unregisterPublicKey";

# In case private key management is available
  method_isPrivateKeyStorage  = "isPrivateKeyStorage";
  method_sign_with_id         = "sign_with_id";
  method_registerPrivateKey   = "registerPrivateKey";
  method_unregisterPrivateKey = "unregisterPrivateKey";
};
